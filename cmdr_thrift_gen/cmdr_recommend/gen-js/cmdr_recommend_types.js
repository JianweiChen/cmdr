//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ModeType = {
  'RESOURCE_MODE' : 1,
  'DEMAND_MODE' : 2,
  'SITE_MODE' : 4,
  'USER_MODE' : 8,
  'UPLOAD_MODE' : 16
};
SignType = {
  'FEED_SIGN' : 1,
  'BACK_SIGN' : 2,
  'PASSIVE_SIGN' : 4
};
RecommendRequest = function(args) {
  this.uid = null;
  this.mode = null;
  this.sign = null;
  this.desc = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uid is unset!');
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
    if (args.sign !== undefined && args.sign !== null) {
      this.sign = args.sign;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
RecommendRequest.prototype = {};
RecommendRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.uid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sign = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecommendRequest.prototype.write = function(output) {
  output.writeStructBegin('RecommendRequest');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I64, 1);
    output.writeI64(this.uid);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.I32, 3);
    output.writeI32(this.sign);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 4);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Resource = function(args) {
  this.cid = null;
  this.title = null;
  this.desc = null;
  this.himg = null;
  this.source = null;
  this.digg = null;
  this.bury = null;
  this.impr = null;
  this.detail = null;
  this.download = null;
  if (args) {
    if (args.cid !== undefined && args.cid !== null) {
      this.cid = args.cid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cid is unset!');
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
    if (args.himg !== undefined && args.himg !== null) {
      this.himg = args.himg;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.digg !== undefined && args.digg !== null) {
      this.digg = args.digg;
    }
    if (args.bury !== undefined && args.bury !== null) {
      this.bury = args.bury;
    }
    if (args.impr !== undefined && args.impr !== null) {
      this.impr = args.impr;
    }
    if (args.detail !== undefined && args.detail !== null) {
      this.detail = args.detail;
    }
    if (args.download !== undefined && args.download !== null) {
      this.download = args.download;
    }
  }
};
Resource.prototype = {};
Resource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.cid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.himg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.digg = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.bury = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.impr = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.detail = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.download = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resource.prototype.write = function(output) {
  output.writeStructBegin('Resource');
  if (this.cid !== null && this.cid !== undefined) {
    output.writeFieldBegin('cid', Thrift.Type.I64, 1);
    output.writeI64(this.cid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 3);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.himg !== null && this.himg !== undefined) {
    output.writeFieldBegin('himg', Thrift.Type.STRING, 4);
    output.writeString(this.himg);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 5);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.digg !== null && this.digg !== undefined) {
    output.writeFieldBegin('digg', Thrift.Type.I32, 6);
    output.writeI32(this.digg);
    output.writeFieldEnd();
  }
  if (this.bury !== null && this.bury !== undefined) {
    output.writeFieldBegin('bury', Thrift.Type.I32, 7);
    output.writeI32(this.bury);
    output.writeFieldEnd();
  }
  if (this.impr !== null && this.impr !== undefined) {
    output.writeFieldBegin('impr', Thrift.Type.I32, 8);
    output.writeI32(this.impr);
    output.writeFieldEnd();
  }
  if (this.detail !== null && this.detail !== undefined) {
    output.writeFieldBegin('detail', Thrift.Type.I32, 9);
    output.writeI32(this.detail);
    output.writeFieldEnd();
  }
  if (this.download !== null && this.download !== undefined) {
    output.writeFieldBegin('download', Thrift.Type.I32, 10);
    output.writeI32(this.download);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecommendResponse = function(args) {
  this.resource_rsp = null;
  if (args) {
    if (args.resource_rsp !== undefined && args.resource_rsp !== null) {
      this.resource_rsp = Thrift.copyList(args.resource_rsp, [Resource]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resource_rsp is unset!');
    }
  }
};
RecommendResponse.prototype = {};
RecommendResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.resource_rsp = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Resource();
          elem6.read(input);
          this.resource_rsp.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecommendResponse.prototype.write = function(output) {
  output.writeStructBegin('RecommendResponse');
  if (this.resource_rsp !== null && this.resource_rsp !== undefined) {
    output.writeFieldBegin('resource_rsp', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.resource_rsp.length);
    for (var iter7 in this.resource_rsp)
    {
      if (this.resource_rsp.hasOwnProperty(iter7))
      {
        iter7 = this.resource_rsp[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Demand = function(args) {
  this.did = null;
  if (args) {
    if (args.did !== undefined && args.did !== null) {
      this.did = args.did;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field did is unset!');
    }
  }
};
Demand.prototype = {};
Demand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.did = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Demand.prototype.write = function(output) {
  output.writeStructBegin('Demand');
  if (this.did !== null && this.did !== undefined) {
    output.writeFieldBegin('did', Thrift.Type.I64, 1);
    output.writeI64(this.did);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

