// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cmdr_recommend

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ModeType int64
const (
  ModeType_RESOURCE_MODE ModeType = 1
  ModeType_DEMAND_MODE ModeType = 2
  ModeType_SITE_MODE ModeType = 4
  ModeType_USER_MODE ModeType = 8
  ModeType_UPLOAD_MODE ModeType = 16
)

func (p ModeType) String() string {
  switch p {
  case ModeType_RESOURCE_MODE: return "RESOURCE_MODE"
  case ModeType_DEMAND_MODE: return "DEMAND_MODE"
  case ModeType_SITE_MODE: return "SITE_MODE"
  case ModeType_USER_MODE: return "USER_MODE"
  case ModeType_UPLOAD_MODE: return "UPLOAD_MODE"
  }
  return "<UNSET>"
}

func ModeTypeFromString(s string) (ModeType, error) {
  switch s {
  case "RESOURCE_MODE": return ModeType_RESOURCE_MODE, nil 
  case "DEMAND_MODE": return ModeType_DEMAND_MODE, nil 
  case "SITE_MODE": return ModeType_SITE_MODE, nil 
  case "USER_MODE": return ModeType_USER_MODE, nil 
  case "UPLOAD_MODE": return ModeType_UPLOAD_MODE, nil 
  }
  return ModeType(0), fmt.Errorf("not a valid ModeType string")
}


func ModeTypePtr(v ModeType) *ModeType { return &v }

func (p ModeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ModeType) UnmarshalText(text []byte) error {
q, err := ModeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ModeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ModeType(v)
return nil
}

func (p * ModeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SignType int64
const (
  SignType_FEED_SIGN SignType = 1
  SignType_BACK_SIGN SignType = 2
  SignType_PASSIVE_SIGN SignType = 4
)

func (p SignType) String() string {
  switch p {
  case SignType_FEED_SIGN: return "FEED_SIGN"
  case SignType_BACK_SIGN: return "BACK_SIGN"
  case SignType_PASSIVE_SIGN: return "PASSIVE_SIGN"
  }
  return "<UNSET>"
}

func SignTypeFromString(s string) (SignType, error) {
  switch s {
  case "FEED_SIGN": return SignType_FEED_SIGN, nil 
  case "BACK_SIGN": return SignType_BACK_SIGN, nil 
  case "PASSIVE_SIGN": return SignType_PASSIVE_SIGN, nil 
  }
  return SignType(0), fmt.Errorf("not a valid SignType string")
}


func SignTypePtr(v SignType) *SignType { return &v }

func (p SignType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SignType) UnmarshalText(text []byte) error {
q, err := SignTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SignType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SignType(v)
return nil
}

func (p * SignType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - UID
//  - Mode
//  - Sign
//  - Desc
type RecommendRequest struct {
  UID int64 `thrift:"uid,1,required" db:"uid" json:"uid"`
  Mode *ModeType `thrift:"mode,2" db:"mode" json:"mode,omitempty"`
  Sign *SignType `thrift:"sign,3" db:"sign" json:"sign,omitempty"`
  Desc *string `thrift:"desc,4" db:"desc" json:"desc,omitempty"`
}

func NewRecommendRequest() *RecommendRequest {
  return &RecommendRequest{}
}


func (p *RecommendRequest) GetUID() int64 {
  return p.UID
}
var RecommendRequest_Mode_DEFAULT ModeType
func (p *RecommendRequest) GetMode() ModeType {
  if !p.IsSetMode() {
    return RecommendRequest_Mode_DEFAULT
  }
return *p.Mode
}
var RecommendRequest_Sign_DEFAULT SignType
func (p *RecommendRequest) GetSign() SignType {
  if !p.IsSetSign() {
    return RecommendRequest_Sign_DEFAULT
  }
return *p.Sign
}
var RecommendRequest_Desc_DEFAULT string
func (p *RecommendRequest) GetDesc() string {
  if !p.IsSetDesc() {
    return RecommendRequest_Desc_DEFAULT
  }
return *p.Desc
}
func (p *RecommendRequest) IsSetMode() bool {
  return p.Mode != nil
}

func (p *RecommendRequest) IsSetSign() bool {
  return p.Sign != nil
}

func (p *RecommendRequest) IsSetDesc() bool {
  return p.Desc != nil
}

func (p *RecommendRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUID = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UID is not set"));
  }
  return nil
}

func (p *RecommendRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *RecommendRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ModeType(v)
  p.Mode = &temp
}
  return nil
}

func (p *RecommendRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SignType(v)
  p.Sign = &temp
}
  return nil
}

func (p *RecommendRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Desc = &v
}
  return nil
}

func (p *RecommendRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecommendRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *RecommendRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMode() {
    if err := oprot.WriteFieldBegin("mode", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mode: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Mode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mode (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mode: ", p), err) }
  }
  return err
}

func (p *RecommendRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSign() {
    if err := oprot.WriteFieldBegin("sign", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sign: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sign (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sign: ", p), err) }
  }
  return err
}

func (p *RecommendRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDesc() {
    if err := oprot.WriteFieldBegin("desc", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:desc: ", p), err) }
    if err := oprot.WriteString(string(*p.Desc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.desc (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:desc: ", p), err) }
  }
  return err
}

func (p *RecommendRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendRequest(%+v)", *p)
}

// Attributes:
//  - Cid
//  - Title
//  - Desc
type Resource struct {
  Cid int64 `thrift:"cid,1,required" db:"cid" json:"cid"`
  Title *string `thrift:"title,2" db:"title" json:"title,omitempty"`
  Desc *string `thrift:"desc,3" db:"desc" json:"desc,omitempty"`
}

func NewResource() *Resource {
  return &Resource{}
}


func (p *Resource) GetCid() int64 {
  return p.Cid
}
var Resource_Title_DEFAULT string
func (p *Resource) GetTitle() string {
  if !p.IsSetTitle() {
    return Resource_Title_DEFAULT
  }
return *p.Title
}
var Resource_Desc_DEFAULT string
func (p *Resource) GetDesc() string {
  if !p.IsSetDesc() {
    return Resource_Desc_DEFAULT
  }
return *p.Desc
}
func (p *Resource) IsSetTitle() bool {
  return p.Title != nil
}

func (p *Resource) IsSetDesc() bool {
  return p.Desc != nil
}

func (p *Resource) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCid bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCid = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Cid is not set"));
  }
  return nil
}

func (p *Resource)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Cid = v
}
  return nil
}

func (p *Resource)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = &v
}
  return nil
}

func (p *Resource)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Desc = &v
}
  return nil
}

func (p *Resource) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Resource"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Resource) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Cid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cid: ", p), err) }
  return err
}

func (p *Resource) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitle() {
    if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
    if err := oprot.WriteString(string(*p.Title)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  }
  return err
}

func (p *Resource) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDesc() {
    if err := oprot.WriteFieldBegin("desc", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:desc: ", p), err) }
    if err := oprot.WriteString(string(*p.Desc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.desc (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:desc: ", p), err) }
  }
  return err
}

func (p *Resource) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Resource(%+v)", *p)
}

// Attributes:
//  - ResourceRsp
type RecommendResponse struct {
  ResourceRsp []*Resource `thrift:"resource_rsp,1,required" db:"resource_rsp" json:"resource_rsp"`
}

func NewRecommendResponse() *RecommendResponse {
  return &RecommendResponse{}
}


func (p *RecommendResponse) GetResourceRsp() []*Resource {
  return p.ResourceRsp
}
func (p *RecommendResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResourceRsp bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceRsp = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResourceRsp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceRsp is not set"));
  }
  return nil
}

func (p *RecommendResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Resource, 0, size)
  p.ResourceRsp =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Resource{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ResourceRsp = append(p.ResourceRsp, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RecommendResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RecommendResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecommendResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resource_rsp", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resource_rsp: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ResourceRsp)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ResourceRsp {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resource_rsp: ", p), err) }
  return err
}

func (p *RecommendResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecommendResponse(%+v)", *p)
}

// Attributes:
//  - Did
type Demand struct {
  Did int64 `thrift:"did,1,required" db:"did" json:"did"`
}

func NewDemand() *Demand {
  return &Demand{}
}


func (p *Demand) GetDid() int64 {
  return p.Did
}
func (p *Demand) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDid bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDid = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Did is not set"));
  }
  return nil
}

func (p *Demand)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Did = v
}
  return nil
}

func (p *Demand) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Demand"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Demand) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("did", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:did: ", p), err) }
  if err := oprot.WriteI64(int64(p.Did)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.did (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:did: ", p), err) }
  return err
}

func (p *Demand) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Demand(%+v)", *p)
}

type CmdrRecommend interface {
  // Parameters:
  //  - Req
  Feed(ctx context.Context, req *RecommendRequest) (r *RecommendResponse, err error)
}

type CmdrRecommendClient struct {
  c thrift.TClient
}

// Deprecated: Use NewCmdrRecommend instead
func NewCmdrRecommendClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CmdrRecommendClient {
  return &CmdrRecommendClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewCmdrRecommend instead
func NewCmdrRecommendClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CmdrRecommendClient {
  return &CmdrRecommendClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCmdrRecommendClient(c thrift.TClient) *CmdrRecommendClient {
  return &CmdrRecommendClient{
    c: c,
  }
}

// Parameters:
//  - Req
func (p *CmdrRecommendClient) Feed(ctx context.Context, req *RecommendRequest) (r *RecommendResponse, err error) {
  var _args1 CmdrRecommendFeedArgs
  _args1.Req = req
  var _result2 CmdrRecommendFeedResult
  if err = p.c.Call(ctx, "feed", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

type CmdrRecommendProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CmdrRecommend
}

func (p *CmdrRecommendProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CmdrRecommendProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CmdrRecommendProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCmdrRecommendProcessor(handler CmdrRecommend) *CmdrRecommendProcessor {

  self3 := &CmdrRecommendProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["feed"] = &cmdrRecommendProcessorFeed{handler:handler}
return self3
}

func (p *CmdrRecommendProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x4

}

type cmdrRecommendProcessorFeed struct {
  handler CmdrRecommend
}

func (p *cmdrRecommendProcessorFeed) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CmdrRecommendFeedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("feed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CmdrRecommendFeedResult{}
var retval *RecommendResponse
  var err2 error
  if retval, err2 = p.handler.Feed(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing feed: " + err2.Error())
    oprot.WriteMessageBegin("feed", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("feed", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type CmdrRecommendFeedArgs struct {
  Req *RecommendRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewCmdrRecommendFeedArgs() *CmdrRecommendFeedArgs {
  return &CmdrRecommendFeedArgs{}
}

var CmdrRecommendFeedArgs_Req_DEFAULT *RecommendRequest
func (p *CmdrRecommendFeedArgs) GetReq() *RecommendRequest {
  if !p.IsSetReq() {
    return CmdrRecommendFeedArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CmdrRecommendFeedArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CmdrRecommendFeedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CmdrRecommendFeedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &RecommendRequest{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CmdrRecommendFeedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("feed_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CmdrRecommendFeedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CmdrRecommendFeedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CmdrRecommendFeedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CmdrRecommendFeedResult struct {
  Success *RecommendResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCmdrRecommendFeedResult() *CmdrRecommendFeedResult {
  return &CmdrRecommendFeedResult{}
}

var CmdrRecommendFeedResult_Success_DEFAULT *RecommendResponse
func (p *CmdrRecommendFeedResult) GetSuccess() *RecommendResponse {
  if !p.IsSetSuccess() {
    return CmdrRecommendFeedResult_Success_DEFAULT
  }
return p.Success
}
func (p *CmdrRecommendFeedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CmdrRecommendFeedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CmdrRecommendFeedResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RecommendResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CmdrRecommendFeedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("feed_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CmdrRecommendFeedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CmdrRecommendFeedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CmdrRecommendFeedResult(%+v)", *p)
}


