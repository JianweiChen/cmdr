#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ModeType(object):
    RESOURCE_MODE = 1
    DEMAND_MODE = 2
    SITE_MODE = 4
    USER_MODE = 8
    UPLOAD_MODE = 16

    _VALUES_TO_NAMES = {
        1: "RESOURCE_MODE",
        2: "DEMAND_MODE",
        4: "SITE_MODE",
        8: "USER_MODE",
        16: "UPLOAD_MODE",
    }

    _NAMES_TO_VALUES = {
        "RESOURCE_MODE": 1,
        "DEMAND_MODE": 2,
        "SITE_MODE": 4,
        "USER_MODE": 8,
        "UPLOAD_MODE": 16,
    }


class SignType(object):
    FEED_SIGN = 1
    BACK_SIGN = 2
    PASSIVE_SIGN = 4

    _VALUES_TO_NAMES = {
        1: "FEED_SIGN",
        2: "BACK_SIGN",
        4: "PASSIVE_SIGN",
    }

    _NAMES_TO_VALUES = {
        "FEED_SIGN": 1,
        "BACK_SIGN": 2,
        "PASSIVE_SIGN": 4,
    }


class RecommendRequest(object):
    """
    Attributes:
     - uid
     - mode
     - sign
     - desc
    """


    def __init__(self, uid=None, mode=None, sign=None, desc=None,):
        self.uid = uid
        self.mode = mode
        self.sign = sign
        self.desc = desc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.uid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.sign = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendRequest')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.I64, 1)
            oprot.writeI64(self.uid)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.sign is not None:
            oprot.writeFieldBegin('sign', TType.I32, 3)
            oprot.writeI32(self.sign)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 4)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.uid is None:
            raise TProtocolException(message='Required field uid is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Resource(object):
    """
    Attributes:
     - cid
     - title
     - desc
     - himg
     - source
     - digg
     - bury
     - impr
     - detail
     - download
    """


    def __init__(self, cid=None, title=None, desc=None, himg=None, source=None, digg=None, bury=None, impr=None, detail=None, download=None,):
        self.cid = cid
        self.title = title
        self.desc = desc
        self.himg = himg
        self.source = source
        self.digg = digg
        self.bury = bury
        self.impr = impr
        self.detail = detail
        self.download = download

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.cid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.himg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.source = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.digg = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.bury = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.impr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.detail = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.download = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Resource')
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.I64, 1)
            oprot.writeI64(self.cid)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 3)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        if self.himg is not None:
            oprot.writeFieldBegin('himg', TType.STRING, 4)
            oprot.writeString(self.himg.encode('utf-8') if sys.version_info[0] == 2 else self.himg)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 5)
            oprot.writeString(self.source.encode('utf-8') if sys.version_info[0] == 2 else self.source)
            oprot.writeFieldEnd()
        if self.digg is not None:
            oprot.writeFieldBegin('digg', TType.I32, 6)
            oprot.writeI32(self.digg)
            oprot.writeFieldEnd()
        if self.bury is not None:
            oprot.writeFieldBegin('bury', TType.I32, 7)
            oprot.writeI32(self.bury)
            oprot.writeFieldEnd()
        if self.impr is not None:
            oprot.writeFieldBegin('impr', TType.I32, 8)
            oprot.writeI32(self.impr)
            oprot.writeFieldEnd()
        if self.detail is not None:
            oprot.writeFieldBegin('detail', TType.I32, 9)
            oprot.writeI32(self.detail)
            oprot.writeFieldEnd()
        if self.download is not None:
            oprot.writeFieldBegin('download', TType.I32, 10)
            oprot.writeI32(self.download)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.cid is None:
            raise TProtocolException(message='Required field cid is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecommendResponse(object):
    """
    Attributes:
     - resource_rsp
    """


    def __init__(self, resource_rsp=None,):
        self.resource_rsp = resource_rsp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.resource_rsp = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Resource()
                        _elem5.read(iprot)
                        self.resource_rsp.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecommendResponse')
        if self.resource_rsp is not None:
            oprot.writeFieldBegin('resource_rsp', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.resource_rsp))
            for iter6 in self.resource_rsp:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.resource_rsp is None:
            raise TProtocolException(message='Required field resource_rsp is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Demand(object):
    """
    Attributes:
     - did
    """


    def __init__(self, did=None,):
        self.did = did

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.did = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Demand')
        if self.did is not None:
            oprot.writeFieldBegin('did', TType.I64, 1)
            oprot.writeI64(self.did)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.did is None:
            raise TProtocolException(message='Required field did is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RecommendRequest)
RecommendRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'uid', None, None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
    (3, TType.I32, 'sign', None, None, ),  # 3
    (4, TType.STRING, 'desc', 'UTF8', None, ),  # 4
)
all_structs.append(Resource)
Resource.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'cid', None, None, ),  # 1
    (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'desc', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'himg', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'source', 'UTF8', None, ),  # 5
    (6, TType.I32, 'digg', None, None, ),  # 6
    (7, TType.I32, 'bury', None, None, ),  # 7
    (8, TType.I32, 'impr', None, None, ),  # 8
    (9, TType.I32, 'detail', None, None, ),  # 9
    (10, TType.I32, 'download', None, None, ),  # 10
)
all_structs.append(RecommendResponse)
RecommendResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'resource_rsp', (TType.STRUCT, [Resource, None], False), None, ),  # 1
)
all_structs.append(Demand)
Demand.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'did', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs
