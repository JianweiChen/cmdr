//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ModeType = {
'RESOURCE_MODE' : 1,
'DEMAND_MODE' : 2,
'SITE_MODE' : 4,
'USER_MODE' : 0,
'X8' : 1,
'UPLOAD_MODE' : 16
};
SignType = {
'FEED_SIGN' : 1,
'BACK_SIGN' : 2,
'PASSIVE_SIGN' : 4
};
RecommendRequest = function(args) {
  this.uid = null;
  this.mode = null;
  this.sign = null;
  this.desc = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.mode !== undefined) {
      this.mode = args.mode;
    }
    if (args.sign !== undefined) {
      this.sign = args.sign;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
  }
};
RecommendRequest.prototype = {};
RecommendRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.uid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sign = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecommendRequest.prototype.write = function(output) {
  output.writeStructBegin('RecommendRequest');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.I64, 1);
    output.writeI64(this.uid);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  if (this.sign !== null && this.sign !== undefined) {
    output.writeFieldBegin('sign', Thrift.Type.I32, 3);
    output.writeI32(this.sign);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 4);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Resource = function(args) {
  this.cid = null;
  this.title = null;
  this.desc = null;
  if (args) {
    if (args.cid !== undefined) {
      this.cid = args.cid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
  }
};
Resource.prototype = {};
Resource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.cid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resource.prototype.write = function(output) {
  output.writeStructBegin('Resource');
  if (this.cid !== null && this.cid !== undefined) {
    output.writeFieldBegin('cid', Thrift.Type.I64, 1);
    output.writeI64(this.cid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 3);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecommendResponse = function(args) {
  this.resource_rsp = null;
  if (args) {
    if (args.resource_rsp !== undefined) {
      this.resource_rsp = args.resource_rsp;
    }
  }
};
RecommendResponse.prototype = {};
RecommendResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.resource_rsp = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Resource();
          elem6.read(input);
          this.resource_rsp.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecommendResponse.prototype.write = function(output) {
  output.writeStructBegin('RecommendResponse');
  if (this.resource_rsp !== null && this.resource_rsp !== undefined) {
    output.writeFieldBegin('resource_rsp', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.resource_rsp.length);
    for (var iter7 in this.resource_rsp)
    {
      if (this.resource_rsp.hasOwnProperty(iter7))
      {
        iter7 = this.resource_rsp[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Demand = function(args) {
  this.did = null;
  if (args) {
    if (args.did !== undefined) {
      this.did = args.did;
    }
  }
};
Demand.prototype = {};
Demand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.did = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Demand.prototype.write = function(output) {
  output.writeStructBegin('Demand');
  if (this.did !== null && this.did !== undefined) {
    output.writeFieldBegin('did', Thrift.Type.I64, 1);
    output.writeI64(this.did);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

